using ObjectStoreE;
using RSAKeygenLib;
using SFM;
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Numerics;

namespace Codename_TALaT_CS
{
    internal class Dev
    {
        public static void DevMode(Story? currentDevStory = null)
        {
            Log.Shared.LogL("Checking keys");

            Log.Shared.LogL("Creating a new template");
            string devPath = Path.Combine(TextAdventureLauncher.gamePath, "StoryDev");
            if (Directory.Exists(devPath))
                Directory.Delete(devPath, true);
            Directory.CreateDirectory(devPath);

            Directory.CreateDirectory(Path.Combine(devPath, "Code"));
            if (currentDevStory == null) //Story setup
            {
                currentDevStory = new Story();
                GlobalManager.developmentStorys.Add(currentDevStory);
                Console.Clear();
                Console.WriteLine("Enter the storys name");
                currentDevStory.storyName = Console.ReadLine() ?? "NullError";
                Console.Clear();
                Console.WriteLine("Enter the storys start file name (in root dir)");
                string startFile = Console.ReadLine() ?? "NullError";
                currentDevStory.codeFiles.Add(new($"\\{startFile}", $"name main;\ntype generic;\nstart\n{{\n#Place your starting code in here.\n}};"));
                currentDevStory.storyStart = currentDevStory.codeFiles[0];

                //Automatic apply
                currentDevStory.languages.Add(new(new List<string>() { "english", "eng" }, "English", "0"));
                currentDevStory.storyDefaultLangVal = "0";
                currentDevStory.descriptions.Add(new("0", $"!!!This is the default description generated by the TALaT dev mode.\nYou've created a story with the name of \"{currentDevStory.storyName}\"\n and a default start file of: {currentDevStory.storyStart.path}.\nYou can edit this description in near furute (probably) or directly after export.\nFor this, you can just go into\nStory>Meta>Description>0 and edit it however you like.\nThanks for using TALaT\n-Ekischleki"));



            }
            Log.Shared.LogL("Creating code files.");
            foreach (InternalFileEmulation internalFile in currentDevStory.codeFiles)
            {
                File.WriteAllText(Path.Combine(Path.Combine(devPath, "Code"), internalFile.path.Substring(1)), internalFile.Content);

            }
            Process.Start("explorer.exe", devPath);

            Console.Clear();
            Console.WriteLine("Dev");
            Console.WriteLine("Publish");
            Console.WriteLine("");


            PackageStory(currentDevStory);




        }

        public static void PackageStory(Story story)
        {
            string packagePath = Path.Combine(Path.GetTempPath(), $"Packge-{Random.Shared.Next()}");

            Directory.CreateDirectory(packagePath);
            string storyPath = Path.Combine(packagePath, "Story");
            Directory.CreateDirectory(storyPath);
            Directory.CreateDirectory(Path.Combine(storyPath, "Code"));
            Directory.CreateDirectory(Path.Combine(storyPath, "Meta"));
            foreach (InternalFileEmulation internalFile in story.codeFiles)
            {
                File.WriteAllText(Path.Combine(Path.Combine(storyPath, "Code"), internalFile.path.Substring(1)), internalFile.Content);

            }
            Directory.CreateDirectory(Path.Combine(storyPath, "Meta\\Description"));
            foreach (InternalFileEmulation internalFile in story.descriptions)
            {
                File.WriteAllText(Path.Combine(Path.Combine(storyPath, "Meta\\Description"), internalFile.path), internalFile.Content);

            }
            StreamWriter supportedLangsStream = new(Path.Combine(storyPath, "Meta\\SupportedLanguages"));
            foreach (SupportedLanguage supportedLanguage in story.languages)
            {
                supportedLangsStream.WriteLine($"{string.Join(',', supportedLanguage.launcherLanguage)}={supportedLanguage.storyLanguage}:{supportedLanguage.internalReference};");
            }
            supportedLangsStream.Flush();
            supportedLangsStream.Dispose();
            File.WriteAllText(Path.Combine(storyPath, "Meta\\Launcher"), $"StoryName={story.storyName};StoryStart={story.storyStart.path};StoryDefaultLangVal={story.storyDefaultLangVal};StoryUseLauncherFunctions={story.storyUseLauncherFunctions};UpdatesVer={story.updatesVer};UpdatesPackage={story.updatesPackage};UpdatesRandomStoryID={Random.Shared.Next()}-{Random.Shared.Next()}-{Random.Shared.Next()}-{Random.Shared.Next()}-{Random.Shared.Next()}-{Random.Shared.Next()}-{Random.Shared.Next()}-{Random.Shared.Next()}-{Random.Shared.Next()}-{Random.Shared.Next()};");
            string hashResult = HashFolderUtils.HashFolder(new string[] { Path.Combine(storyPath, "Code"), Path.Combine(storyPath, "Meta") });
            BigInteger hashBigIntiger = BigInteger.Parse(hashResult, System.Globalization.NumberStyles.HexNumber);
            Log.Shared.LogE("Signing hash: " + hashBigIntiger);


            Region signatureRegion = new("Signature");
            signatureRegion.SubRegions.Add(GlobalManager.CreatorKeys.PublicKey.Save);
            signatureRegion.DirectValues.Add(new("signedHash", GlobalManager.CreatorKeys.PrivateKey.CryptUsingKeypair(hashBigIntiger).ToString(), false));

            File.WriteAllText(Path.Combine(storyPath, "Signature"), signatureRegion.RegionSaveString);

        }
    }
}
